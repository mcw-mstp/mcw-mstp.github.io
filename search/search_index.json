{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#welcome-to-mstp-codes","title":"Welcome to MSTP Codes","text":"<p>This is a website to share information and resources about mcw mstp. We are currently taking suggestions for pages and information that you would like be made available.</p> <p>Warning</p> <p>This site is activly being updated and some layouts might change. </p> <p>This site was built using mkdocs and uses the material theme.</p>"},{"location":"#layout","title":"Layout","text":"<p>I was thinking that the primary pages could run accross the header. If you have any suggestions for topics, feel free to edit the site or shoot me an email (or since you are here, message me on the ABACUS slack channel)</p>"},{"location":"#to-do","title":"To-do","text":"<p>I was thinking it might be nice if people try the process of editing this site. Therefore it'd be great to have people get back to me about the process</p> <ul> <li> Have people add their names to the site<ul> <li> Verify that 'contributing' instructions make sense</li> </ul> </li> <li> Make central one-drive folder</li> <li> Add previous Abacus resources</li> <li> Maybe add survey results somewhere?</li> <li> Figure out where tutorials should go</li> <li> Make a logo</li> <li> Auto-build the website following merged pull requests</li> </ul> <p>Feel free to give feedback smazurchuk@mcw.edu</p>"},{"location":"abacus/","title":"Association for Biomolecular and Computational Simulation","text":"A student-run coding group for everyone <p>Welcome! ABACUS is an open group for coding and learning to use new applications. We have meetings that cover the basics of coding (like shaping and tidying data) along with more complex topics.</p> <p>ABACUS will be meeting this Fall on Thursdays at 4pm in MEB2050/2070 (grad school classroom). There will also be python focus group meetings Thursdays from 5-5:30 with William Yuan (and others)</p> <p>Interact with us anytime on the ABACUS slack channel or shoot us an email just to say hi  or to be added to the Abacus email list!</p> <p>ABACUS_Leaders@mcw.edu</p> <p>Join Slack Channel</p>"},{"location":"abacus/#fall-2021-schedule","title":"Fall 2021 Schedule:","text":"Date Title Documents / Info September 9 Introduction and Basics Intro Slides, dplyr  cheatsheet, tidy cheatsheet September 16 Data Handling TidyData September 30 Making Figures in R and Python October 14 Using the HPC October 28 Protein Models and Simulations November 11 Social / Applications"},{"location":"abacus_resources/","title":"ABACUS Resources","text":""},{"location":"contributing/","title":"Editing This Site","text":"<p>This page gives documentation about how to make an edit to this site. There are two main ways. Both methods require a github account, so if you do not already have one, go ahead and make one. To begin, we strongly reccoment adding your name under the 'People' tab as a way to familiarize yourself with the process. </p>"},{"location":"contributing/#quick-and-easy","title":"Quick and Easy","text":"<p>On a page that you would like to edit, simply click the '' icon at the heading you would like to edit. This will take you to a page where you can make an edit mark at the title.</p> <p>After having made your change to the <code>.md</code> file, don't hesitate to be verbose in describing the change you made. Once you submit the change as a pull-request, the change will be reviewed and then (likely) committed to the website. Thats it! </p>"},{"location":"contributing/#longer-but-more-versatile-way","title":"Longer (but more versatile way)","text":"<p>For larger changes, it will likely be easier to actually get used to using github</p>"},{"location":"contributing/#1-install-git","title":"1) Install <code>git</code>","text":"<p>If it's not already installed on your system, the first step is to install the <code>git</code> utility. This is what underlies github.com and most collaborative projects across the web. Follow the instructions at the below link to get started</p> <p>https://docs.github.com/en/get-started/quickstart/set-up-git</p> <p>Note</p> <p>Make sure to make a github account so that you can push  changes to public repositories</p>"},{"location":"contributing/#2-clone-this-repository","title":"2) Clone this Repository","text":"<p>On your system, open up a folder and change the directory (<code>cd</code> command) to wherever you would like this repository to be saved. Then clone this repository and <code>cd</code> into the directory!</p> <pre><code>cd /home/smazurchuk/Desktop # or whatever folder you prefer\ngit clone https://github.com/mcw-mstp/mcw-mstp.github.io.git\ncd mcw-mstp.github.io\n</code></pre>"},{"location":"contributing/#3-create-a-new-working-branch","title":"3) Create a New Working Branch","text":"<p>We now have to create a new banch. You can pick whatever name you like for this, and create the branch with the command</p> <pre><code>git checkout -b branch-name-here\n</code></pre> <p>The <code>-b</code> option indicates that you are creating a new branch.</p>"},{"location":"contributing/#4-install-mkdocs-optional","title":"4) Install mkdocs (Optional)","text":"<p>Info</p> <p>Installing this is only necessary to preview changes</p> <p>In order to generate a live preview of the edits you make to the site, you will need to download a python package called mkdocs. If python or a way of managing python virtual environments is not already installed on your system, there is better documentation elsewhere for doing those steps. </p> <p>If you have python installed, then simply type:</p> <pre><code>pip install mkdocs\n</code></pre> <p>To see if all the required packages installed, try to serve the webpage <pre><code>mkdocs serve\n</code></pre></p> <p>If there is an error, there might be some extenstions missing. In this case, try the following command</p> <pre><code>pip install mkdocs-material-extensions\n</code></pre> <p>If not, shoot me an email</p>"},{"location":"contributing/#5-make-an-edit","title":"5) Make an edit!","text":"<p>We suggest that the first edit is adding your name to the contributers page! To do this, open the file <code>people.md</code> file in the docs folder in your favorite text editor. Then add your name using | as a dividers between table values.</p> <pre><code>| Name | Email | Background |\n|---|---|---|\n| Stephen | smazurchuk@mcw.edu | I work mainly with fMRI datasets (imagingn data) and have a strong background in python and Matlab. &lt;br&gt;Also somewhat knowledgeable in some machine learning topics |\n|Dohn Joe  | dj@mcw.edu | A made-up personality |\n</code></pre> <p>Note</p> <p>If you would like for the text in the background section to be broken up over multiple lines, make sure to include the <code>&lt;br&gt;</code> text where you would like a line break</p>"},{"location":"contributing/#6-push-changes-to-github","title":"6) Push Changes to Github","text":"<p>This section will perhaps have the strangest instructions for those new to <code>git</code>. Now that you have edited and saved your changes to <code>people.md</code>. The steps are:</p> <ol> <li><code>git add docs/people.md</code></li> <li><code>git commit -m \"your message here in qoutes\"</code></li> <li><code>git push origin branch-name-here</code></li> </ol>"},{"location":"contributing/#7-make-pull-request-for-official-site","title":"7) Make Pull Request for Official Site","text":"<p>Finally, this last step submits your changes for review before it is merged with the main branch. To this, you can go to github.com and when you go to this repository, you should see the ability to click a green button that says \"Compare &amp; Pull Request\". Follow the steps, and write a description of what your pull request changes on the site. This info will be reviewed and then merged with the site! That's it! </p>"},{"location":"contributing/#extra-info","title":"Extra Info","text":"<p>Mkdocs is a very convienent tool for building documentation. For working with this site, the only commands you should need are:</p> <ul> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs gh-deploy --force</code> - Build the documentation site. (This pushes the built site to the gh-pages branch). The force option is needed since we hace multiple pages under some of the main headers</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"contributing/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>A comprehensive list of features that can be used on this site can be found at: </p> <p>https://squidfunk.github.io/mkdocs-material/reference/abbreviations/</p>"},{"location":"introPython/","title":"Welcome!","text":"<p>I will place some of the \"projects\" between each session here. I was thinking of jumping into programming, so I've come up with a task that I think would be difficult to do with excel.</p>"},{"location":"introPython/#session-2","title":"Session 2","text":"<ul> <li>Download Milwaukee crime data for this year-to-date https://data.milwaukee.gov/dataset/wibr</li> <li>For a zip-code of your choosing, find the time of day with when the most thefts are reported.<ul> <li>Filter by zipcode</li> <li>Convert time to <code>dateTime</code></li> <li>Take only the time of day</li> <li>Create a moving average of number of thefts</li> <li>Plot this, find the maximum</li> </ul> </li> </ul>"},{"location":"news/","title":"News","text":"<p>This is a place to put some updates and upcoming events</p>"},{"location":"people/people/","title":"People","text":"<p>Below is a list of people who you can reach out to and provide some background.</p> Name Email Background Stephen smazurchuk@mcw.edu I work mainly with fMRI datasets (imaging data) and have a strong background in Python and Matlab. Also somewhat knowledgeable in some machine learning topics Moujtaba mkasmani@mcw.edu My work is centered around using sequencing techniques such as bulk RNA-seq, scRNA-seq, and scTCR-seq to study the immune system. Most of my work is done in R, although I occasionally use some tools directly in the Linux terminal/command line. Shana ssnarrenberg@mcw.edu Peter pezhang@mcw.edu My background is in Statistics and I work primarily in R. I also have some knowledge in C++ and some maching learning topics Kyler kscrawford@mcw.edu I am a structural biologist using techniques like NMR to study cancer signaling proteins. My research relies on protein visualization and modeling using applications like Pymol and Rosetta. Ryan rbonate@mcw.edu My background is in biophysics and mathematics. My research is in structural MRI and relies mainly on image analysis. Megan mcfischer@mcw.edu My background is in genetics and genomics. My research involves the analysis of WES and WGS data for variant/gene discovery in ocular developmental disorders. Mindy minkim@mcw.edu I have little to no experience with coding. I have worked with STATA in the past for statistical analyses. Emma etillison@mcw.edu Joe jhennessey@mcw.edu I don't know much about coding, please don't reach out to me Andrew acao@mcw.edu I have done half of the R tutorial Malone mfriedman@mcw.edu Katie ktaquet@mcw.edu"},{"location":"people/smazurchuk/","title":"Hi","text":"<p>Thanks for checking out my personal page. I'm currently a graduate student in the lab of Dr. Jeffrey Binder and I study concept representation in the brain!</p>"},{"location":"people/smazurchuk/#research-interests","title":"Research Interests","text":"<ul> <li>Neurobiology of language</li> <li>Functional neuroimaging<ul> <li>Resting state analysis</li> <li>Multivariate pattern analysis</li> </ul> </li> </ul>"},{"location":"people/smazurchuk/#previous-presentations","title":"Previous Presentations","text":"<p>Linked here are also some of my previous RIP presentations if you would like to learn more about my work. Use the spacebar to click through the slides.</p> <p> </p> <p> </p> <p> </p>"},{"location":"resources/pointers/","title":"Pointers","text":""},{"location":"resources/pointers/#rcc-pointers","title":"RCC Pointers","text":"<p>Want to run a job on the login/head node? Run an interactive job! From a login node, run the following command (but remember to change your account)</p> <pre><code>srun --job-name=interactive --ntasks=1 --cpus-per-task=6 --mem=64gb \\\n--time=6:00:00 --partition=normal --account=jbinder  --pty bash\n</code></pre> <p>A cool feature is that if you want to access a gui application you still can! You can load a singularity container. Once you're in the interactive job, run the following command:</p> <pre><code>singularity shell /hpc/containers/centos_7_mate_latest.sif\n</code></pre> <p>Finally, you'll likely want to re-source your bash profile (e.g. for anaconda)</p> <pre><code>source ~/.bashrc\n</code></pre>"},{"location":"resources/resources/","title":"Resources","text":""},{"location":"resources/resources/#python","title":"Python","text":""},{"location":"resources/resources/#r","title":"R","text":"<ul> <li>R for Data Science<ul> <li>Free Online textbook for people getting started (basics of programming and data analysis in R)</li> </ul> </li> <li>dplyr  cheat sheet</li> <li>tidy cheat sheet</li> </ul>"},{"location":"resources/resources/#machine-learning","title":"Machine Learning","text":""},{"location":"resources/resources/#c","title":"C++","text":"<p>For those of you daring enough to undertake this trechourous project ...</p> <ul> <li>learncpp.com<ul> <li>Step-by-step tutorial for learning basics of cpp</li> </ul> </li> <li>Another tuturial</li> </ul>"},{"location":"rna_seq/single_cell/","title":"Demo","text":"<p>Mouj! I was thinking you might be able to add things to this page </p>"},{"location":"rna_seq/lect1/lect1/","title":"Lecture 1","text":"<p>These slides are part of a workshop by the Cui Lab on 6/21/21 about how to use R to analyze single-cell RNA sequencing data. It starts by going over the basics of scRNA-seq and how it differs from bulk RNA-seq. We'll then download a publicly available dataset and analyze it together using the attached script.</p> <p>Feel free to look at or download the slides below!</p> This is an embedded Microsoft Office presentation, powered by Office. <p></p>"},{"location":"rna_seq/lect1/lect1/#results","title":"Results","text":"<p>Click here to see the rendered results, or here to download the <code>.Rmd</code> file used to generate the output.</p>"},{"location":"rna_seq/lect1/lect1/#scrna_seq-analysis","title":"scRNA_seq analysis","text":"<p>This is an R Markdown document. Code can only be written in chunks, which are set off by sets of three tick marks (```).</p> <p>Spaces between chunks can be used to take notes.</p> <p>To add a new chunk, click the \u201cInsert\u201d icon towards the top right of the script section of RStudio. Then select \u201cR\u201d from the dropdown menu. Alternatively, press Command + Option + I (Mac) or Control + Alt + I (Windows) on your keyboard.</p> <p>You can name chunks by typing a name after the letter \u201cr\u201d inside the curly braces. The drop down menu in the bottom left of the script section of RStudio allows you to skip to any chunk, so naming chunks makes it easy to keep track of where you want to skip to in your script.</p> <pre><code># Inside a chunk, anything in a line written after a pound sign/hashtag is a comment and will not be run as code\n# Use comments to take notes in line with your code\n\ninstall.packages(\"Seurat\")\ninstall.packages(\"tidyverse\")\n</code></pre> <pre><code># Downloaded packages are not automatically available for use in R\n# The library() function loads packages for use in one session of R\n# If you restart R, you don't need to install the packages again, but you do need to library() them\n\nlibrary(Seurat)\n</code></pre> <pre><code>## Attaching SeuratObject\n</code></pre> <pre><code>library(tidyverse)\n</code></pre> <pre><code>## Registered S3 method overwritten by 'cli':\n##   method     from         \n##   print.boxx spatstat.geom\n\n## \u2500\u2500 Attaching packages \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 tidyverse 1.3.1 \u2500\u2500\n\n## \u2713 ggplot2 3.3.5     \u2713 purrr   0.3.4\n## \u2713 tibble  3.1.4     \u2713 dplyr   1.0.7\n## \u2713 tidyr   1.1.3     \u2713 stringr 1.4.0\n## \u2713 readr   2.0.1     \u2713 forcats 0.5.1\n\n## \u2500\u2500 Conflicts \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 tidyverse_conflicts() \u2500\u2500\n## x dplyr::filter() masks stats::filter()\n## x dplyr::lag()    masks stats::lag()\n</code></pre> <pre><code># Seurat expects the input files to be called \"barcodes.tsv.gz\", \"features.tsv.gz\", and \"matrix.mtx.gz\"\n# We first need to rename the downloaded files to make them match these names exactly\n\nfile.rename(\"matrix_files/GSM3701181_GP33_day30_barcodes.tsv.gz\", \"matrix_files/barcodes.tsv.gz\")\n</code></pre> <pre><code>## Warning in file.rename(\"matrix_files/GSM3701181_GP33_day30_barcodes.tsv.gz\", :\n## cannot rename file 'matrix_files/GSM3701181_GP33_day30_barcodes.tsv.gz' to\n## 'matrix_files/barcodes.tsv.gz', reason 'No such file or directory'\n\n## [1] FALSE\n</code></pre> <pre><code>file.rename(\"matrix_files/GSM3701181_GP33_day30_genes.tsv.gz\", \"matrix_files/features.tsv.gz\")\n</code></pre> <pre><code>## Warning in file.rename(\"matrix_files/GSM3701181_GP33_day30_genes.tsv.gz\", :\n## cannot rename file 'matrix_files/GSM3701181_GP33_day30_genes.tsv.gz' to\n## 'matrix_files/features.tsv.gz', reason 'No such file or directory'\n\n## [1] FALSE\n</code></pre> <pre><code>file.rename(\"matrix_files/GSM3701181_GP33_day30_matrix.mtx.gz\", \"matrix_files/matrix.mtx.gz\")\n</code></pre> <pre><code>## Warning in file.rename(\"matrix_files/GSM3701181_GP33_day30_matrix.mtx.gz\", :\n## cannot rename file 'matrix_files/GSM3701181_GP33_day30_matrix.mtx.gz' to\n## 'matrix_files/matrix.mtx.gz', reason 'No such file or directory'\n\n## [1] FALSE\n</code></pre> <pre><code>Cl13.raw &lt;- Read10X(data.dir = \"matrix_files/\")\n\n# Cl13.raw is currently stored as a matrix object in R (matrix of genes and cells)\n# We can check how many cells and genes are available for analysis with the dim() function\n\ndim(Cl13.raw)\n</code></pre> <pre><code>## [1] 27998  1838\n</code></pre> <pre><code># 27998  1838\n\n# dim() always returns the number of rows, then the number of columns in a matrix or data frame\n# scRNA-seq data is always arranged such that rows are genes and columns are cells\n# Therefore, this dataset has 27,998 genes detected across 1,838 cells\n\n# We need to make a Seurat object from the matrix object Cl13.raw\n\nCl13 &lt;- CreateSeuratObject(counts = Cl13.raw, project = \"Cl13\")\n\n# You can also call dim() on Seurat objects to see how many genes and cells are in your dataset\ndim(Cl13)\n</code></pre> <pre><code>## [1] 27998  1838\n</code></pre> <pre><code># 27998  1838\n</code></pre> <pre><code># Not all cells are usable for analysis, so we need to filter out low quality cells\n\n# First, have Seurat calculate what percentage of the transcriptome of each cell comes from mitochondrial genes\n# Cells with high percentages of mitochondrial mRNA may be apoptotic\n# Note that all mitochondrial genes being with \"mt-\", so Seurat can easily find these genes\nCl13$percent.mt &lt;- PercentageFeatureSet(object = Cl13, pattern = \"^mt-\")\n\n# View the number of unique genes (nFeature_RNA), number of total transcripts (nCount_RNA), and percent of mitochondrial reads (percent.mt) for each cell\nVlnPlot(object = Cl13, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\"))\n</code></pre> <p></p> <pre><code># Notice how some cells have many more unique genes than most cells\n# These cells may be doublets (two cells captured in the same oil droplet and labeled with the same barcode sequence)\n# We need to remove these cells to prevent contamination\n\n# We generally also remove cells with very few unique genes per cell, as these cells will not provide much information and may decrease the quality of the analysis\n# Cells in this dataset are above the typical minimal threshold (200 genes per cell)\n\n# Live cells will have a low percentage of mitochondrial mRNA, so we also use this metric to filter cells\n# Typical cutoffs for percent.mt are 5-10% depending on how stringent you want your quality control to be and how many cells you can afford to filter out\n\nCl13 &lt;- subset(Cl13, subset = nFeature_RNA &gt; 200 &amp; nFeature_RNA &lt; 2500 &amp; percent.mt &lt; 10)\n</code></pre> <pre><code># Normalize the data - divides the number of reads for each gene in a cell by the total number of reads in that cell\n# Normalization makes reads comparable betwwen cells that had different read depth during sequencing\nCl13 &lt;- NormalizeData(Cl13)\n\n# Select highly variable features - these will be used for PCA/UMAP\n# Running PCA/UMAP on all genes is computationally intensive and doesn't really improve results\nCl13 &lt;- FindVariableFeatures(Cl13)\n\n# You can examine the variable features on a plot if you want to see them\nLabelPoints(VariableFeaturePlot(Cl13),\npoints = head(VariableFeatures(Cl13), 10))\n</code></pre> <pre><code>## Warning: Transformation introduced infinite values in continuous x-axis\n\n## Warning: Removed 14339 rows containing missing values (geom_point).\n</code></pre> <p></p> <pre><code># Load genes for cell cycle regression\nCC_genes &lt;- Seurat::cc.genes.updated.2019\n\n# These genes are currently in human gene format (all caps)\n# We need to change them to mouse gene format (first letter caps, all other letters lowercase)\nCC_genes &lt;- lapply(CC_genes, function(x){\npaste0(\nsubstring(x, 1, 1),\ntolower(substring(x, 2)))})\n\n# Calculate the cell cycle phase of cells\nCl13 &lt;- CellCycleScoring(Cl13, s.features = CC_genes$s.genes, g2m.features = CC_genes$g2m.genes)\n</code></pre> <pre><code>## Warning: The following features are not present in the object: Pimreg, Jpt1, not\n## searching for symbol synonyms\n</code></pre> <pre><code># Note that not all cell cycle genes will always be found in each dataset\n\n# Scale the data - scales the expression of each gene across all cells to a range centered at 0 (usually -2 to +2)\n# While scaling, we'll also regress out cell cycle phase scores so these don't impact data scaling\n# By default, Seurat only scales variable genes, which we found with the FindVariableFeatures() function earlier\nCl13 &lt;- ScaleData(Cl13, vars.to.regress = c(\"S.Score\", \"G2M.Score\"))\n</code></pre> <pre><code>## Regressing out S.Score, G2M.Score\n\n## Centering and scaling data matrix\n</code></pre> <pre><code># If you want to scale all genes, for example to generate large heatmaps later, you need to specify this\n# We aren't doing this today for the sake of time, but the command to do so is below\n# Cl13 &lt;- ScaleData(Cl13, features = rownames(Cl13), vars.to.regress = c(\"S.Score\", \"G2M.Score\"))\n</code></pre> <pre><code># We need to generate a PCA plot before we contruct a UMAP plot\n# By default, 50 PCs are calculated; you can choose to set fewer PCs manually\nCl13 &lt;- RunPCA(Cl13, npcs = 30)\n</code></pre> <pre><code>## PC_ 1 \n## Positive:  Ccl5, Gzmb, Gzma, Cx3cr1, Zeb2, Ahnak, Lgals1, Ccl4, Klre1, S1pr5 \n##     Klrc1, Crip1, Rap1b, Id2, Emp3, Lgals3, Cd48, S100a6, Klrd1, Ifngr1 \n##     S100a4, Spn, Txk, Il18rap, Klrc2, Vim, Calm1, Actb, Klrb1c, Klrg1 \n## Negative:  Rps28, Rps18, Rpl13, Slamf6, Rps19, Tcf7, Rplp1, Rpl39, Rps29, Rps20 \n##     Rps9, Rplp2, Rps15a, Xcl1, Rpl32, Rpl37, Rpl23, Rps16, Rps7, Id3 \n##     Il7r, Rps6, Rpl36a, Rpl35, Rpl36, Ltb, Rplp0, Rpl12, Rpl41, Rps5 \n## PC_ 2 \n## Positive:  Lgals1, Ly6c2, Cx3cr1, Zeb2, Tmsb10, Ahnak, Atp1b3, Klrd1, Klf2, Il18rap \n##     S100a10, Klrk1, Klre1, S1pr5, Klrc1, Il18r1, Klf3, Vim, Rap1b, Emp3 \n##     Itgb1, H2afz, Spn, Tagln2, Rasgrp2, S1pr1, S100a4, Klrg1, Pycard, Rpl41 \n## Negative:  Cd7, Rgs1, Nr4a2, Lag3, 2900026A02Rik, Cd160, Gzmk, Tox, Cd244, Sept4 \n##     Sh2d2a, AW112010, Ptger4, Cxcr6, Pdcd1, Ccl4, Ccl3, Lax1, Abi3, Ikzf2 \n##     Serpina3g, Abcb9, Maf, Adgrg1, Adam19, Chn2, Cd200r1, Actn2, Cd27, Tnfrsf9 \n## PC_ 3 \n## Positive:  Zeb2, Klre1, S1pr5, Klra9, Rps29, PISD, Gzma, Klrc2, Klrb1c, Kcnj8 \n##     Tcf7, Klf2, Txk, Il7r, Id3, Rps28, Klrk1, Kcnq1ot1, Il18rap, Klrd1 \n##     Bcl2l11, Itgb1, Tnfsf8, Arl4c, Xcl1, Zfp36l1, Bcl2, Klra3, Rpl36, As3mt \n## Negative:  Actg1, Sub1, Pfn1, S100a6, S100a11, S100a4, Crip1, Coro1a, Lgals3, Lsp1 \n##     Glipr2, Gapdh, Ccnb2, Rbm3, Txn1, Arpc4, Actr3, Cotl1, Vim, Ifi27l2a \n##     Prdx1, Lrrc58, Calm1, AW112010, Anxa2, Ube2c, Ywhah, S100a10, Arpc5, Rom1 \n## PC_ 4 \n## Positive:  Ifit3, Ifit1, Rsad2, Isg15, Usp18, Ifit3b, Irf7, Ifi204, Slfn8, Slfn5 \n##     Rtp4, Pydc3, Pydc4, Gm4955, Ifih1, Oas3, Isg20, Trim30a, Iigp1, Cxcl10 \n##     Stat1, Herc6, Cmpk2, Zbp1, Pyhin1, Oasl2, Mx1, Mnda, Bst2, Oasl1 \n## Negative:  Pfn1, Actg1, Rps7, Gm9493, Tnfrsf9, S100a6, Gapdh, Rplp0, Rpl10, Coro1a \n##     Rpl3, Rps6, Adam19, Rps15a, Rpl4, Rps2, S100a4, Rpl41, Snhg6, Rpl36a \n##     Rpl39, Pglyrp1, Chchd10, Rpl32, S100a11, Rpl22l1, Etfb, Ggt1, Sub1, Ctla2a \n## PC_ 5 \n## Positive:  Hmmr, Birc5, Ccna2, Kif4, Ckap2l, Casc5, Cenpf, Esco2, Neil3, 2810417H13Rik \n##     Rrm2, Cdca8, Hist1h1b, Aspm, Kif14, Kif22, Kifc1, Nusap1, Tpx2, Cdca3 \n##     Nsl1, Mxd3, Cenph, Pbk, Hist1h2ap, Cdc20, Kif2c, Ccnb2, Bub1, Rad54b \n## Negative:  Hmgb2, Smc4, Ccl5, Rpl32, Rpl39, Rpl37, Rpl13, Rpl10a, Rps7, Rps15a \n##     Rpl23a, Samhd1, Rpl18, Rpl3, Ifit1bl1, Rps6, Rpl36, Rpl41, Rps18, Plac8 \n##     Rplp2, Rps16, Rps10, Rplp1, Epsti1, Rplp0, Ifit1, Crip1, Rps19, Rpl4\n</code></pre> <pre><code>Cl13 &lt;- FindNeighbors(Cl13, dims = 1:30)\n</code></pre> <pre><code>## Computing nearest neighbor graph\n\n## Computing SNN\n</code></pre> <pre><code>Cl13 &lt;- FindClusters(Cl13, resolution = 0.3)\n</code></pre> <pre><code>## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n## \n## Number of nodes: 1790\n## Number of edges: 101145\n## \n## Running Louvain algorithm...\n## Maximum modularity in 10 random starts: 0.8835\n## Number of communities: 5\n## Elapsed time: 0 seconds\n</code></pre> <pre><code>Cl13 &lt;- RunUMAP(Cl13, dims = 1:30)\n</code></pre> <pre><code>## Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric\n## To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'\n## This message will be shown once per session\n\n## 10:07:12 UMAP embedding parameters a = 0.9922 b = 1.112\n\n## 10:07:12 Read 1790 rows and found 30 numeric columns\n\n## 10:07:12 Using Annoy for neighbor search, n_neighbors = 30\n\n## 10:07:12 Building Annoy index with metric = cosine, n_trees = 50\n\n## 0%   10   20   30   40   50   60   70   80   90   100%\n\n## [----|----|----|----|----|----|----|----|----|----|\n\n## **************************************************|\n## 10:07:13 Writing NN index file to temp file /tmp/RtmpMkSBB6/file311af47e6ae98\n## 10:07:13 Searching Annoy index using 1 thread, search_k = 3000\n## 10:07:13 Annoy recall = 100%\n## 10:07:13 Commencing smooth kNN distance calibration using 1 thread\n## 10:07:14 Initializing from normalized Laplacian + noise\n## 10:07:14 Commencing optimization for 500 epochs, with 74660 positive edges\n## 10:07:16 Optimization finished\n</code></pre> <pre><code># Show the UMAP plot\nDimPlot(Cl13)\n</code></pre> <p></p> <pre><code># Clusters are numbered by decreasing size\n\n# There isn't a set number of PCs to use for PCA or UMAP construction\n# In general, PCs are set between 10 and 50\n# It's usually better to use more PCs than fewer, as too few PCs will drastically alter the data whereas extra PCs will hardly change the overall structure of the data\n# The larger the dataset, the more PCs should be used\n\n# Resolution in FindClusters() doesn't affect the shape of the clusters but does affect the coloring (cluster assignment) of cells\n# Look at what happens when we change only the resolution and recreate the UMAP plot\nCl13 &lt;- FindClusters(Cl13, resolution = 0.2)\n</code></pre> <pre><code>## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n## \n## Number of nodes: 1790\n## Number of edges: 101145\n## \n## Running Louvain algorithm...\n## Maximum modularity in 10 random starts: 0.9131\n## Number of communities: 3\n## Elapsed time: 0 seconds\n</code></pre> <pre><code>DimPlot(Cl13)\n</code></pre> <p></p> <pre><code># Alternatively, we can color the cells based on their cell cycle phase instead of their cluster identity\nDimPlot(Cl13, group.by = \"Phase\")\n</code></pre> <p></p> <pre><code># Always test to make sure that your cell populations are pure, even if you sequenced FACS-sorted cells (sorting is never perfect)\n# In this case, the cells are supposed to be LCMV GP33-specific CD8 T cells\n# We can examine identity genes with different plots\nVlnPlot(Cl13, features = c(\"Cd8a\", \"Cd3e\"))\n</code></pre> <p></p> <pre><code>FeaturePlot(Cl13, features = c(\"Cd8a\", \"Cd3e\"))\n</code></pre> <p></p> <pre><code># All clusters express high levels of Cd3e and CD8a, suggesting that these cells are CD8 T cells\n</code></pre> <pre><code># If we don't know what genes are important, we can analyze differentially expressed genes (DEGs) in each cluster\nCl13_markers &lt;- FindAllMarkers(Cl13, only.pos = T)\n</code></pre> <pre><code>## Calculating cluster 0\n\n## For a more efficient implementation of the Wilcoxon Rank Sum Test,\n## (default method for FindMarkers) please install the limma package\n## --------------------------------------------\n## install.packages('BiocManager')\n## BiocManager::install('limma')\n## --------------------------------------------\n## After installation of limma, Seurat will automatically use the more \n## efficient implementation (no further action necessary).\n## This message will be shown once per session\n\n## Calculating cluster 1\n\n## Calculating cluster 2\n</code></pre> <pre><code># Setting only.pos = T tells Seurat to only look for genes that are upregulated in each cluster\n\n# Let's examine the top 10 DEGs per cluster\nCl13_markers %&gt;% group_by(cluster) %&gt;% top_n(10, wt = avg_log2FC)\n</code></pre> <pre><code>## # A tibble: 30 \u00d7 7\n## # Groups:   cluster [3]\n##        p_val avg_log2FC pct.1 pct.2 p_val_adj cluster gene \n##        &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt; &lt;fct&gt;   &lt;chr&gt;\n##  1 1.44e-165       2.97 0.712 0.116 4.03e-161 0       Cd7  \n##  2 4.87e- 88       1.47 0.656 0.211 1.36e- 83 0       Cxcr6\n##  3 1.62e- 83       1.26 0.706 0.255 4.54e- 79 0       Gzmk \n##  4 1.60e- 66       1.74 0.699 0.37  4.49e- 62 0       Rgs1 \n##  5 1.07e- 64       1.22 0.703 0.346 2.98e- 60 0       Lag3 \n##  6 1.79e- 63       1.65 0.867 0.564 5.01e- 59 0       Ccl4 \n##  7 5.34e- 61       1.81 0.695 0.351 1.49e- 56 0       Ccl3 \n##  8 8.52e- 53       1.29 0.433 0.127 2.39e- 48 0       Maf  \n##  9 1.35e- 51       1.24 0.708 0.408 3.78e- 47 0       Nr4a2\n## 10 8.70e- 49       1.22 0.418 0.13  2.43e- 44 0       Cd160\n## # \u2026 with 20 more rows\n</code></pre> <pre><code># Note that gene names don't always match protein names (Pdcd1 = PD-1, Slamf6 = Ly108)\n\n# We can plot some of these genes to visualize how specific they are to each cluster\nVlnPlot(Cl13, features = c(\"Cxcr6\", \"Nr4a2\", \"Cx3cr1\", \"Zeb2\", \"Slamf6\", \"Il7r\"))\n</code></pre> <p></p> <pre><code>DotPlot(Cl13, features = c(\"Cxcr6\", \"Nr4a2\", \"Cx3cr1\", \"Zeb2\", \"Slamf6\", \"Il7r\"))\n</code></pre> <p></p> <pre><code>FeaturePlot(Cl13, features = c(\"Cxcr6\", \"Nr4a2\", \"Cx3cr1\", \"Zeb2\", \"Slamf6\", \"Il7r\"))\n</code></pre> <p></p> <pre><code>RidgePlot(Cl13, features = c(\"Cxcr6\", \"Nr4a2\", \"Cx3cr1\", \"Zeb2\", \"Slamf6\", \"Il7r\"))\n</code></pre> <pre><code>## Picking joint bandwidth of 0.144\n\n## Picking joint bandwidth of 0.226\n\n## Picking joint bandwidth of 0.0622\n\n## Picking joint bandwidth of 0.0646\n\n## Picking joint bandwidth of 0.0817\n\n## Picking joint bandwidth of 0.086\n</code></pre> <p></p> <pre><code># Using our knowledge of CD8 T cell biology from the literature and our own experiments, we can determine cluster identities:\n# Cluster 0 - Exhausted cells\n# Cluster 1 - Effector cells\n# Cluster 2 - Progenitor cells\n</code></pre> <pre><code># To make figures easier to follow, we can rename the clusters in our Seurat object\nCl13 &lt;- RenameIdents(Cl13,\n\"0\" = \"Exhausted\",\n\"1\" = \"Effector\",\n\"2\" = \"Progenitor\")\n\n# Check to make sure the new names are okay\nDimPlot(Cl13)\n</code></pre> <p></p> <pre><code># Make a folder for figures\ndir.create(\"Figures\")\n</code></pre> <pre><code>## Warning in dir.create(\"Figures\"): 'Figures' already exists\n</code></pre> <pre><code># The ggsave() function saves plots into a directory you want in a file format you specify\n# ggsave() automatically saves the last plot run in R, so place this command directly after the plot you want to save and run them together\n# Remember to include the \"Figures\" in the file path inside ggsave()\n# Tip: In RStudio, you can press the Tab key inside quotation marks to automatically list and select file paths\n\n# UMAP\n# Most plotting functions in Seurat allow you to easily change the colors of the clusters as well\n# Remember that colors are specified in the order that the clusters are listed (by default, clusters are arranged in alphabetical order)\nDimPlot(Cl13, cols = c(\"gray50\", \"red\", \"skyblue\"))\n</code></pre> <p></p> <pre><code>ggsave(\"Figures/UMAP.png\", dpi = 300)\n</code></pre> <pre><code>## Saving 7 x 5 in image\n</code></pre> <pre><code># dpi specifies the image resolution for PNG files; always save at 300 dpi (the default is 72 dpi, which is lower resolution and not acceptable for publications)\n\n# UMAP colored by cell cycle phase\nDimPlot(Cl13, group.by = \"Phase\")\n</code></pre> <p></p> <pre><code>ggsave(\"Figures/UMAP_cell_cycle.png\", dpi = 300)\n</code></pre> <pre><code>## Saving 7 x 5 in image\n</code></pre> <pre><code># FeaturePlot to verify cell purity\nFeaturePlot(Cl13, features = c(\"Cd3e\", \"Cd8a\"))\n</code></pre> <p></p> <pre><code>ggsave(\"Figures/Cell_purity_FeaturePlot.png\")\n</code></pre> <pre><code>## Saving 7 x 5 in image\n</code></pre> <pre><code># VlnPlot of major markers defining each subset\n# Rememer to keep the colors you pick consistent if you don't want to use the default colors\nVlnPlot(Cl13, features = c(\"Pdcd1\", \"Cx3cr1\", \"Slamf6\"), cols = c(\"gray50\", \"red\", \"skyblue\"))\n</code></pre> <p></p> <pre><code>ggsave(\"Figures/Cluster_markers_VlnPlot.png\", dpi = 300)\n</code></pre> <pre><code>## Saving 7 x 5 in image\n</code></pre> <pre><code># DotPlot of differentially expressed genes from FindAllMarkers() that may be of interest\n# We'll manually set the height and width of this file so the text on the x-axis fits properly\nDotPlot(Cl13, features = c(\"Pdcd1\", \"Cxcr6\", \"Nr4a2\", \"Cx3cr1\", \"S1pr5\", \"Tbx21\", \"Slamf6\", \"Il7r\", \"Tcf7\"))\n</code></pre> <p></p> <pre><code>ggsave(\"Figures/Cluster_markers_DotPlot.png\", dpi = 300, width = 9, height = 5)\n\n# 5 figures in 1 hour\n# Price: $0\n\n# Further analyses can be conducted with the following packages:\n#   Monocle - Psuedotime trajectory analysis\n#   VeloCyto - RNA Velocity\n#   SCENIC - regulon (transcription factor gene regulatory network) analysis\n#   CellPhoneDB - Cell-cell receptor-ligand interactions (currently only available as a Python package)\n#   ggpubr - easy statistical analysis for violin or box plots\n#   novoSpaRc - de novo or atlas-based spatial reconstruction of scRNA-seq data (currently only available as a Python package)\n</code></pre>"}]}